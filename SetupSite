function CreateNonExistentFilesForNext()
{
    sudo mkdir -p Components
    sudo mkdir -p Components/Shared
    sudo mkdir -p App
    sudo mkdir -p Public
    sudo mkdir -p Contents
    sudo mkdir -p Styles
    sudo chmod -R 777 $PWD
    if [[ $(find Components -type f | wc -l) == 0 ]]; then
        cp /PaydarCore/Infra/Next/FooterTemplate ./Components/Shared/Footer.jsx
    fi 
    if [ ! -f NextConfig.js ]; then
        cp /PaydarCore/Infra/Next/NextConfigTemplate NextConfig.js
    fi
    if [ ! -f TailwindConfig.js ]; then
        cp /PaydarCore/Infra/Next/TailwindConfigTemplate TailwindConfig.js
    fi
    if [ ! -f .env ]; then
        touch .env
    fi
    if [ ! -f .env.production ]; then
        touch .env.production
    fi
    if [ ! -f JsConfig.json ]; then
        cp /PaydarCore/Infra/Next/JsConfigTemplate JsConfig.json
    fi
    if [[ $Next13 ]]; then
        if [ ! -f App/page.jsx ] && [ ! -d "App/[[...path]]" ]; then
            cp /PaydarCore/Infra/Next/PageTemplate.jsx App/page.jsx
        fi
        if [ ! -f App/layout.jsx ]; then
            cp /PaydarCore/Infra/Next/LayoutTemplate.jsx App/layout.jsx
        fi    
    else
        if [ ! -f App/index.jsx ] && [ ! -f "App/[[...path]].jsx" ]; then
            cp /PaydarCore/Infra/Next/IndexTemplate App/index.jsx
        fi
        if [ ! -f App/_app.jsx ]; then
            cp /PaydarCore/Infra/Next/AppTemplate App/_app.jsx
        fi
    fi
    sudo chmod -R 777 $PWD
}

function BuildBaseMappings()
{
    if [[ $Next13 ]]; then
      export volumes="$volumes\n      - *PaydarCore*NextApp*Base:*$Repository*$Project*Base"
      export volumes="$volumes\n      - *PaydarCore*NextApp*Components:*$Repository*$Project*BaseComponents"
      export volumes="$volumes\n      - *PaydarCore*NextApp*Hooks:*$Repository*$Project*BaseHooks"
      export volumes="$volumes\n      - *PaydarCore*NextApp*Fonts:*$Repository*$Project*public*Fonts"
      export volumes="$volumes\n      - *PaydarCore*NextApp*Build:*$Repository*$Project*Build"
      export volumes="$volumes\n      - *PaydarCore*NextApp*postcss.config.js:*$Repository*$Project*postcss.config.js"
      export volumes="$volumes\n      - *PaydarCore*NextApp*TailwindBase.js:*$Repository*$Project*TailwindBase.js"
      export volumes="$volumes\n      - *PaydarCore*NextApp*next.js:*$Repository*$Project*next.js"
      export volumes="$volumes\n      - *PaydarCore*NextApp*Api:*$Repository*$Project*pages*api"
    else
      export volumes="$volumes\n      - *PaydarCore*Next*Base:*$Repository*$Project*Base"
      export volumes="$volumes\n      - *PaydarCore*Next*Components:*$Repository*$Project*BaseComponents"
      export volumes="$volumes\n      - *PaydarCore*Next*Hooks:*$Repository*$Project*BaseHooks"
      export volumes="$volumes\n      - *PaydarCore*Next*Fonts:*$Repository*$Project*public*Fonts"
      export volumes="$volumes\n      - *PaydarCore*Next*Build:*$Repository*$Project*Build"
      export volumes="$volumes\n      - *PaydarCore*Next*.eslintrc.json:*$Repository*$Project*.eslintrc.json"
      export volumes="$volumes\n      - *PaydarCore*Next*postcss.config.js:*$Repository*$Project*postcss.config.js"
      export volumes="$volumes\n      - *PaydarCore*Next*tailwind.js:*$Repository*$Project*tailwind.js"
      export volumes="$volumes\n      - *PaydarCore*Next*next.js:*$Repository*$Project*next.js"
      export volumes="$volumes\n      - *PaydarCore*Next*middleware.js:*$Repository*$Project*middleware.js"
      export volumes="$volumes\n      - *PaydarCore*Next*Api:*$Repository*$Project*pages*api"
      export volumes="$volumes\n      - *PaydarCore*Next*Pages*_error.jsx:*$Repository*$Project*pages*_error.jsx"
      export volumes="$volumes\n      - *PaydarCore*Next*Styles*style.css:*$Repository*$Project*styles*style.css"
    fi
}

function BuildDependenciesMappings()
{
    if [ ! -f /$Organization/$Repository/Common/Dependencies ]; then
        return;
    fi
    while read Dependency; 
    do
        if [[ $Next13 ]]; then
            if [ -d /PaydarCore/$Dependency/NextApp/App ]; then
                while read foundDirectory;
                do
                    if [[ $foundDirectory == "" ]]; then continue; fi
                    pageDirectory=$(basename $foundDirectory)
                    if [ ! -d /$Organization/$Repository/$Project/App/$pageDirectory ] || [[ $(find /$Organization/$Repository/$Project/App/$pageDirectory -mindepth 1 | wc -l ) == 0 ]]; then
                        export volumes="$volumes\n      - *PaydarCore*$Dependency*NextApp*App*$pageDirectory:*$Repository*$Project*app*$pageDirectory"
                    fi
                done <<< "$(find /PaydarCore/$Dependency/NextApp/App -mindepth 1 -maxdepth 1 -type d)"
            fi
        else
            if [ -d /PaydarCore/$Dependency/Next/Pages ]; then
                while read foundDirectory;
                do
                    if [[ $foundDirectory == "" ]]; then continue; fi
                    pageDirectory=$(basename $foundDirectory)
                    if [ ! -d /$Organization/$Repository/$Project/App/$pageDirectory ] || [[ $(find /$Organization/$Repository/$Project/App/$pageDirectory -mindepth 1 | wc -l ) == 0 ]]; then
                        export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*Pages*$pageDirectory:*$Repository*$Project*pages*$pageDirectory"
                    fi
                done <<< "$(find /PaydarCore/$Dependency/Next/Pages -mindepth 1 -maxdepth 1 -type d)"
            fi
        fi
        export DirectoryName=Next
        if [[ $Next13 ]]; then
            export DirectoryName=NextApp
        fi
        if [ -d /PaydarCore/$Dependency/$DirectoryName/Components ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*$DirectoryName*Components:*$Repository*$Project*Modules*$Dependency*Components"
        fi
        if [ -d /PaydarCore/$Dependency/$DirectoryName/Contexts ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*$DirectoryName*Contexts:*$Repository*$Project*Modules*$Dependency*Contexts"
        fi
        if [ -d /PaydarCore/$Dependency/$DirectoryName/Hooks ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*$DirectoryName*Hooks:*$Repository*$Project*Modules*$Dependency*Hooks"
        fi
        if [ -d /PaydarCore/$Dependency/$DirectoryName/Functions ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*$DirectoryName*Functions:*$Repository*$Project*Modules*$Dependency*Functions"
        fi
        if [ -f /PaydarCore/$Dependency/$DirectoryName/Exports.jsx ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*$DirectoryName*Exports.jsx:*$Repository*$Project*Modules*$Dependency*Exports.jsx"
        fi
    done <<< "$({ cat "/$Organization/$Repository/Common/Dependencies"; echo; })"
}

function SetupSite() 
{
    Info "Seting up site"
    export Next13=$(grep "app:\s*true" NextConfig.js)

    # LinkGitIgnore $PWD
    # CreateGitHubAction Next
    # DetermineTailwindConfigPath
    CreateNonExistentFilesForNext
    export volumes=""
    BuildBaseMappings
    BuildDependenciesMappings

    if [[ $Next13 ]]; then
        export AppMappingTarget="app";
    else
        export AppMappingTarget="pages";
    fi
    # echo -e $volumes


    envsubst < /PaydarCore/Docker/Composes/Site > $ComposePath

    sed -i "s/# Dependencies/$volumes/g" $ComposePath
    sed -i "s/*/\//g" $ComposePath
}
