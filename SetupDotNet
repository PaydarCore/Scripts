function CopyVSCodeFiles() 
{
    if [ -d "/$Organization/$Repository/$Project/.vscode" ]; then
        sudo rm -rf "/$Organization/$Repository/$Project/.vscode"
    fi
    sudo mkdir /$Organization/$Repository/$Project/.vscode
    sudo chmod -R 777 /$Organization/$Repository/$Project/.vscode

    envsubst < /PaydarCore/Infra/DotNet/Dev/Launch > /$Organization/$Repository/$Project/.vscode/launch.json
    envsubst < /PaydarCore/Infra/DotNet/Dev/Tasks > /$Organization/$Repository/$Project/.vscode/tasks.json
}

function BuildConfigMappings()
{
    if [ -f /$Organization/$Repository/Common/ConnectionStrings.json ]; then
        export volumes="$volumes\n            - *$Organization*Repository*Common*ConnectionStrings.json:*Api*ConnectionStrings.json"
    fi
    if [ -f /$Organization/$Repository/Common/Settings.json ]; then
        export volumes="$volumes\n            - *$Organization*Repository*Common*Settings.json:*Api*Settings.json"
    fi
    if [ -f /$Organization/$Repository/$Repository/SettingsOverride.json ]; then
        export volumes="$volumes\n            - *$Organization*Repository*$Repository*SettingsOverride.json:*Api*SettingsOverride.json"
    fi
}

function BuildDependenciesMappingsForApi() 
{
    if [ ! -f /$Organization/$Repository/Common/ApiDependencies ]; then
        return;
    fi
    while read Dependency; do
        Org=$(echo $Dependency | cut -d'/' -f1)
        Repo=$(echo $Dependency | cut -d'/' -f2)
        if [ ! -f /$Org/$Repo/Database.json ]; then
            Warning "Wrong dependency: $Dependency"
            continue;
        fi
        export volumes="$volumes\n            - *$Org*$Repo:*$Org*$Repo"
        export volumes="$volumes\n            - *$Org*$Repo*Models:*$Repository*$Project*$Repo*Models"
        export volumes="$volumes\n            - *$Org*$Repo*DataAccess:*$Repository*$Project*$Repo*DataAccess"
        export volumes="$volumes\n            - *$Org*$Repo*Business:*$Repository*$Project*$Repo*Business"
        if [[ $(basename $PWD) == *Admin* ]]; then
            export volumes="$volumes\n            - *$Org*$Repo*Api*Admin:*$Repository*$Project*$Repo*Api"
        fi
    done <<< "$({ cat "/$Organization/$Repository/Common/ApiDependencies"; echo; })"
}

function BuildLocalizationMappings()
{
    while read Item; do
        ReplacedItem="${Item//\//*}"
        export volumes="$volumes\n            - $ReplacedItem:$ReplacedItem"
    done <<< "$(find /PaydarCore /$Organization -type f -name 'Localization.json' 2>/dev/null | sort)"
}

function CreateApiContainer()
{
    ComposeFile=/Temp/$Organization/$Repository/$Project/DockerCompose.yml
    mkdir -p $(dirname $ComposeFile)
    envsubst < /PaydarCore/Infra/DotNet/Dev/DockerCompose.yml > $ComposeFile
    sed -i "s/# Dependencies/$volumes/g" $ComposeFile
    sed -i "s/*/\//g" $ComposeFile
    docker-compose -p "${Repository}_${Project}" -f $ComposeFile up --remove-orphans
}

function SetupDotNet() 
{
    Info "Setting up API"
    CopyVSCodeFiles

    export volumes=""
    BuildConfigMappings volumes
    BuildDependenciesMappingsForApi volumes
    BuildLocalizationMappings volumes
    echo -e $volumes

    # CreateGitHubAction DotNet

    # CreateStorageContainer
    SetupSql
    CreateApiContainer "Dev"
}