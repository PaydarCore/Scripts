function CreateNonExistentFilesForApi()
{
    if [ ! -f Program.cs ]; then
        echo "Application.Run();" > Program.cs
    fi
    if [ ! -f /$Organization/$Repository/Common/ConnectionStrings.json ]; then
        echo "{"  > /$Organization/$Repository/Common/ConnectionStrings.json
        echo "    \"Database\": \"Data Source=database;Initial Catalog=$Repository;user id=SA;password=Hjvj6DS8yvq25MOW_LRkV;Application Name=$Repository\"" >> /$Organization/$Repository/Common/ConnectionStrings.json
        echo "}"  >> /$Organization/$Repository/Common/ConnectionStrings.json
    fi
    if [ ! -f /$Organization/$Repository/Common/Settings.json ]; then
        echo "{ }"  > /$Organization/$Repository/Common/Settings.json
    fi
    if [ ! -f /$Organization/$Repository/Common/ModuleUsings.cs ]; then
        touch /$Organization/$Repository/Common/ModuleUsings.cs
    fi
    if [ ! -f /$Organization/$Repository/Common/${Repository}Usings.cs ]; then
        touch /$Organization/$Repository/Common/${Repository}Usings.cs
    fi
    sudo chmod -R 777 $PWD
}

function CopyVSCodeFiles() 
{
    if [ -d "/$Organization/$Repository/$Project/.vscode" ]; then
        sudo rm -rf "/$Organization/$Repository/$Project/.vscode"
    fi
    sudo mkdir /$Organization/$Repository/$Project/.vscode
    sudo chmod -R 777 /$Organization/$Repository/$Project/.vscode

    envsubst < /PaydarCore/Infra/DotNet/Dev/Launch > /$Organization/$Repository/$Project/.vscode/launch.json
    envsubst < /PaydarCore/Infra/DotNet/Dev/Tasks > /$Organization/$Repository/$Project/.vscode/tasks.json
}

function BuildConfigMappings()
{
    if [ -f /$Organization/$Repository/Common/ConnectionStrings.json ]; then
        export volumes="$volumes\n            - *$Organization*Repository*Common*ConnectionStrings.json:*Api*ConnectionStrings.json"
    fi
    if [ -f /$Organization/$Repository/Common/Settings.json ]; then
        export volumes="$volumes\n            - *$Organization*Repository*Common*Settings.json:*Api*Settings.json"
    fi
    if [ -f /$Organization/$Repository/$Repository/SettingsOverride.json ]; then
        export volumes="$volumes\n            - *$Organization*Repository*$Repository*SettingsOverride.json:*Api*SettingsOverride.json"
    fi
}

function BuildDependenciesMappingsForApi() 
{
    if [ ! -f /$Organization/$Repository/Common/Dependencies ]; then
        return;
    fi
    while read Dependency; do
        Repo=${Dependency}Api
        if [ -d /$Organization/$Repository/$Dependency ]; then
            Org=$Organization
        else
            Org=PaydarCore
        fi
        if [ ! -f /$Org/$Repo/Database.json ]; then
            Warning "Wrong dependency: $Dependency. No /$Org/$Repo/Database.json"
            continue;
        fi
        export volumes="$volumes\n            - *$Org*$Repo:*$Org*$Repo"
        export volumes="$volumes\n            - *$Org*$Repo*Models:*$Repository*$Project*$Repo*Models"
        export volumes="$volumes\n            - *$Org*$Repo*DataAccess:*$Repository*$Project*$Repo*DataAccess"
        export volumes="$volumes\n            - *$Org*$Repo*Business:*$Repository*$Project*$Repo*Business"
        if [[ $(basename $PWD) == *Admin* ]]; then
            export volumes="$volumes\n            - *$Org*$Repo*Api*Admin:*$Repository*$Project*$Repo*Api"
        fi
    done <<< "$({ cat "/$Organization/$Repository/Common/Dependencies"; echo; })"
}

function BuildLocalizationMappings()
{
    while read Item; do
        ReplacedItem="${Item//\//*}"
        export volumes="$volumes\n            - $ReplacedItem:$ReplacedItem"
    done <<< "$(find /PaydarCore /$Organization -type f -name 'Localization.json' 2>/dev/null | sort)"
}

function CreateApiContainer()
{
    envsubst < /PaydarCore/Infra/DotNet/Dev/DockerCompose.yml > $ComposePath
    sed -i "s/# Dependencies/$volumes/g" $ComposePath
    sed -i "s/*/\//g" $ComposePath
}

function SetupDotNet() 
{
    Divide
    Info "Setting up API"
    Divide
    CreateNonExistentFilesForApi
    CopyVSCodeFiles

    export volumes=""
    BuildConfigMappings volumes
    BuildDependenciesMappingsForApi volumes
    BuildLocalizationMappings volumes
    # echo -e $volumes

    # CreateGitHubAction DotNet

    # CreateStorageContainer
    SetupSql
    CreateApiContainer "Dev"
}