function CreateNonExistentFilesForSite()
{
    sudo mkdir -p Components
    sudo mkdir -p Components/Shared
    sudo mkdir -p pages
    sudo mkdir -p public
    # sudo mkdir -p contents
    sudo mkdir -p styles
    sudo chmod -R 777 $PWD
    if [[ $(find Components -type f | wc -l) == 0 ]]; then
        cp /PaydarCore/Infra/Next/FooterTemplate ./Components/Shared/Footer.js
    fi 
    if [ ! -f next.config.js ]; then
        cp /PaydarCore/Infra/Next/NextConfigTemplate next.config.js
    fi
    if [ ! -f tailwind.config.js ]; then
        cp /PaydarCore/Infra/Next/TailwindConfigTemplate tailwind.config.js
    fi
    if [ ! -f .env ]; then
        touch .env
    fi
    if [ ! -f .env.production ]; then
        touch .env.production
    fi
    if [ ! -f jsconfig.json ]; then
        cp /PaydarCore/Infra/Next/JsConfigTemplate jsconfig.json
    fi
    if [ ! -f pages/index.js ]; then
        cp /PaydarCore/Infra/Next/IndexTemplate pages/index.js
    fi
    if [ ! -f pages/_app.js ]; then
        cp /PaydarCore/Infra/Next/AppTemplate pages/_app.js
    fi
    sudo chmod -R 777 $PWD
}

function BuildDependenciesMappings()
{
    if [ ! -f /$Organization/$Repository/Common/Dependencies ]; then
        return;
    fi
    while read Dependency; 
    do
        if [ -d /PaydarCore/$Dependency/Next/pages ]; then
            while read foundDirectory;
            do
                pageDirectory=$(basename $foundDirectory)
                if [ ! -d /$Organization/$Repository/$Project/pages/$pageDirectory ] || [[ $(find /$Organization/$Repository/$Project/pages/$pageDirectory -mindepth 1 | wc -l ) == 0 ]]; then
                    export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*pages*$pageDirectory:*$Repository*$Project*pages*$pageDirectory"
                fi
            done <<< "$(find /PaydarCore/$Dependency/Next/pages -mindepth 1 -maxdepth 1 -type d)"
        fi
        if [ -d /PaydarCore/$Dependency/Next/app ]; then
            while read foundDirectory;
            do
                pageDirectory=$(basename $foundDirectory)
                if [ ! -d /$Organization/$Repository/$Project/app/$pageDirectory ] || [[ $(find /$Organization/$Repository/$Project/app/$pageDirectory -mindepth 1 | wc -l ) == 0 ]]; then
                    export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*app*$pageDirectory:*$Repository*$Project*app*$pageDirectory"
                fi
            done <<< "$(find /PaydarCore/$Dependency/Next/app -mindepth 1 -maxdepth 1 -type d)"
        fi
        if [ -d /PaydarCore/$Dependency/Next/Components ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*Components:*$Repository*$Project*Modules*$Dependency*Components"
        fi
        if [ -d /PaydarCore/$Dependency/Next/Contexts ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*Contexts:*$Repository*$Project*Modules*$Dependency*Contexts"
        fi
        if [ -d /PaydarCore/$Dependency/Next/Hooks ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*Hooks:*$Repository*$Project*Modules*$Dependency*Hooks"
        fi
        if [ -f /PaydarCore/$Dependency/Next/Exports.js ]; then
            export volumes="$volumes\n      - *PaydarCore*$Dependency*Next*Exports.js:*$Repository*$Project*Modules*$Dependency*Exports.js"
        fi
    done <<< "$({ cat "/$Organization/$Repository/Common/Dependencies"; echo; })"
}

function SetupNext() 
{
    Info "Seting up site"
    # LinkGitIgnore $PWD
    # CreateGitHubAction Next
    # DetermineTailwindConfigPath
    CreateNonExistentFilesForSite
    export volumes=""
    BuildDependenciesMappings
    # echo -e $volumes

    envsubst < /PaydarCore/Infra/Next/Dev/DockerCompose.yml > $ComposePath

    sed -i "s/# Dependencies/$volumes/g" $ComposePath
    sed -i "s/*/\//g" $ComposePath
}
