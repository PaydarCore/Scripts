function CreateNonExistentFilesForSite()
{
    sudo mkdir -p Components
    sudo mkdir -p pages
    sudo mkdir -p public
    # sudo mkdir -p contents
    sudo mkdir -p styles
    sudo chmod -R 777 $PWD
    if [ ! -f next.config.js ]; then
        touch next.config.js
    fi
    if [ ! -f tailwind.config.js ]; then
        cp /PaydarCore/Infra/Next/TailwindConfigTemplate tailwind.config.js
    fi
    if [ ! -f .env ]; then
        touch .env
    fi
    if [ ! -f .env.production ]; then
        touch .env.production
    fi
    if [ ! -f jsconfig.json ]; then
        cp /PaydarCore/Infra/Next/JsConfigTemplate jsconfig.json
    fi
    if [ ! -f pages/index.js ]; then
        cp /PaydarCore/Infra/Next/IndexTemplate pages/index.js
    fi
    if [ ! -f pages/_app.js ]; then
        cp /PaydarCore/Infra/Next/AppTemplate pages/_app.js
    fi
    sudo chmod -R 777 $PWD
}

function BuildDependenciesMappings()
{
    if [ ! -f /$Organization/Common/Dependencies ]; then
        return;
    fi
    while read Dependency; 
    do
        if [ -d /HolismSite/$Dependency/pages ]; then
            while read foundDirectory;
            do
                echo $foundDirectory
                pageDirectory=$(basename $foundDirectory)
                if [ ! -d /$Organization/$Repository/pages/$pageDirectory ] || [[ $(find /$Organization/$Repository/pages/$pageDirectory -mindepth 1 | wc -l ) == 0 ]]; then
                    export volumes="$volumes\n      - *HolismSite*$Dependency*pages*$pageDirectory:*$Organization*$Repository*pages*$pageDirectory"
                fi
            done <<< "$(find /HolismSite/$Dependency/pages -mindepth 1 -maxdepth 1 -type d)"
        fi
    done <<< "$({ cat "/$Organization/Common/Dependencies"; echo; })"
}

function SetupNext() 
{
    Info "Seting up site"
    # LinkGitIgnore $PWD
    # CreateGitHubAction Next
    # DetermineTailwindConfigPath
    CreateNonExistentFilesForSite
    ComposeFile=/Temp$ProjectPath/DockerCompose.yml
    sudo mkdir -p $(dirname $ComposeFile)
    envsubst < /PaydarCore/Infra/Next/Dev/DockerCompose.yml > $ComposeFile
    sudo docker-compose -p "${Repository}_${Project}" -f $ComposeFile up --remove-orphans
}
