function CreateNonExistentFilesForApi()
{
    if [ ! -f Program.cs ]; then
        echo "Application.Run();" > Program.cs
    fi
    sudo mkdir -p /$Organization/$Repository/Common
    sudo chmod -R 777 /$Organization/$Repository/Common
    if [ ! -f /$Organization/$Repository/Common/Dependencies ]; then
        echo  > /$Organization/$Repository/Common/Dependencies
    fi
    if [ ! -f /$Organization/$Repository/Common/ConnectionStrings.json ]; then
        echo "{"  > /$Organization/$Repository/Common/ConnectionStrings.json
        echo "    \"Database\": \"Data Source=database;Initial Catalog=$Repository;user id=SA;password=Hjvj6DS8yvq25MOW_LRkV;Application Name=$Repository\"" >> /$Organization/$Repository/Common/ConnectionStrings.json
        echo "}"  >> /$Organization/$Repository/Common/ConnectionStrings.json
    fi
    if [ ! -f /$Organization/$Repository/Common/Settings.json ]; then
        echo "{"  > /$Organization/$Repository/Common/Settings.json
        echo '    "IsDeveloping": "true",'  >> /$Organization/$Repository/Common/Settings.json
        echo '    "JwtConfigKey": "change_this_with_a_random_key"'  >> /$Organization/$Repository/Common/Settings.json
        echo "}"  >> /$Organization/$Repository/Common/Settings.json
    fi
    if [ ! -f /$Organization/$Repository/Common/ModuleUsings.cs ]; then
        touch /$Organization/$Repository/Common/ModuleUsings.cs
    fi
    if [ ! -f /$Organization/$Repository/Common/${Repository}Usings.cs ]; then
        touch /$Organization/$Repository/Common/${Repository}Usings.cs
    fi
    sudo chmod -R 777 $PWD
}

function GenerateModuleUsings()
{
    sed 's/\w*/global using \0;/' $DependenciesPath > $ModuleUsingsPath
    echo 'global using Entities;' >> $ModuleUsingsPath
    echo 'global using Globalization;' >> $ModuleUsingsPath
    echo 'global using Accounts;' >> $ModuleUsingsPath
    cat $ModuleUsingsPath | sort > /Temp/ModuleUsings
    cat /Temp/ModuleUsings > $ModuleUsingsPath
}

function LinkDevContainer() 
{
    if [ -d /Temp/$Organization/$Repository/$Project/.devcontainer ]; then
        sudo rm -rf /Temp/$Organization/$Repository/$Project/.devcontainer
    fi

    sudo mkdir /Temp/$Organization/$Repository/$Project/.devcontainer
    sudo chmod -R 777 /Temp/$Organization/$Repository/$Project/.devcontainer
    envsubst < /PaydarCore/Infra/DotNet/Dev/DevContainer > /Temp/$Organization/$Repository/$Project/.devcontainer/devcontainer.json

    if [ $Repository != "Storage" ]; then
        envsubst < /PaydarCore/Infra/DotNet/Dev/DevContainer > /home/$USER/.config/Code/User/globalStorage/ms-vscode-remote.remote-containers/imageConfigs/paydar%2fapi%3alatest.json
    fi
}

function LinkVSCodeFilesForApi() 
{
    if [ -d /Temp/$Organization/$Repository/$Project/.vscode ]; then
        sudo rm -rf /Temp/$Organization/$Repository/$Project/.vscode
    fi
    sudo mkdir /Temp/$Organization/$Repository/$Project/.vscode
    sudo chmod -R 777 /Temp/$Organization/$Repository/$Project/.vscode

    envsubst < /PaydarCore/Infra/DotNet/Dev/Launch > /Temp/$Organization/$Repository/$Project/.vscode/launch.json
    envsubst < /PaydarCore/Infra/DotNet/Dev/Tasks > /Temp/$Organization/$Repository/$Project/.vscode/tasks.json
}

function BuildConfigMappings()
{
    if [ -f /$Organization/$Repository/Common/ConnectionStrings.json ]; then
        export volumes="$volumes\n            - *$Organization*$Repository*Common*ConnectionStrings.json:*$Repository*$Project*ConnectionStrings.json"
    fi
    if [ -f /$Organization/$Repository/Common/Settings.json ]; then
        export volumes="$volumes\n            - *$Organization*$Repository*Common*Settings.json:*$Repository*$Project*Settings.json"
    fi
    if [ -f /$Organization/$Repository/$Project/SettingsOverride.json ]; then
        export volumes="$volumes\n            - *$Organization*$Repository*$Project*SettingsOverride.json:*$Repository*$Project*SettingsOverride.json"
    fi
}

function BuildDependenciesMappingsForApi() 
{
    if [ ! -f /$Organization/$Repository/Common/Dependencies ]; then
        return;
    fi
    while read Dependency; do
        Repo=${Dependency}Api
        ExtraPath=""
        ExtraPathWithStar=""
        if [ -d /$Organization/$Repository/$Repo ]; then
            Org=$Organization
            ExtraPath="/$Repository"
            ExtraPathWithStar="*$Repository"
        else
            Org=PaydarCore
        fi
        if [ ! -f /$Org${ExtraPath}/$Repo/Database.json ]; then
            Warning "Wrong dependency: $Dependency. No /$Org${ExtraPath}/$Repo/Database.json"
            continue;
        fi
        if [[ $Repo == AccountsApi ]] || [[ $Repo == LanguagesApi ]] || [[ $Repo == EntitiesApi ]]; then
            continue;
        fi
        export volumes="$volumes\n            - *$Org${ExtraPathWithStar}*$Repo:*$Org${ExtraPathWithStar}*$Repo"
        export volumes="$volumes\n            - *$Org${ExtraPathWithStar}*$Repo*Models:*$Repository*$Project*$Repo*Models"
        export volumes="$volumes\n            - *$Org${ExtraPathWithStar}*$Repo*DataAccess:*$Repository*$Project*$Repo*DataAccess"
        export volumes="$volumes\n            - *$Org${ExtraPathWithStar}*$Repo*Business:*$Repository*$Project*$Repo*Business"
        if [[ $(basename $PWD) == *Admin* ]]; then
            export volumes="$volumes\n            - *$Org${ExtraPathWithStar}*$Repo*Api*Admin:*$Repository*$Project*$Repo*Api"
        fi
        if [[ $(basename $PWD) == *Site* ]]; then
            export volumes="$volumes\n            - *$Org${ExtraPathWithStar}*$Repo*Api*Site:*$Repository*$Project*$Repo*Api"
        fi
    done <<< "$({ cat "/$Organization/$Repository/Common/Dependencies"; echo; })"
}

function BuildLocalizationMappings()
{
    while read Item; do
        ReplacedItem="${Item//\//*}"
        export volumes="$volumes\n            - $ReplacedItem:$ReplacedItem"
    done <<< "$(find /PaydarCore /$Organization/$Repository -type d -name 'Localization' 2>/dev/null | sort)"
}

function CreateApiContainer()
{
    envsubst < /PaydarCore/Docker/Composes/Api > $ComposePath
    sed -i "s/# Dependencies/$volumes/g" $ComposePath
    sed -i "s/*/\//g" $ComposePath
}

function SetupApi() 
{
    Divide
    Info "Setting up API"
    Divide
    CreateNonExistentFilesForApi
    GenerateModuleUsings
    LinkDevContainer
    LinkVSCodeFilesForApi
    export volumes=""
    BuildConfigMappings volumes
    BuildDependenciesMappingsForApi volumes
    BuildLocalizationMappings volumes
    # echo -e $volumes

    # CreateGitHubAction DotNet

    SetupDatabase
    CreateApiContainer
}
